// src/main/scala/progscala2/typelessdomore/method-overloaded-return-v1.scX
// Version 1 of "StringUtil" (with a compilation error).
// ERROR: Won't compile: needs a String return type on the second "joiner".

object StringUtilV1 {
  def joiner(strings: String*): String = strings.mkString("-")

  def joiner(strings: List[String]) = joiner(strings :_*)   // COMPILATION ERROR
}

println( StringUtilV1.joiner(List("Programming", "Scala")) )


/**
 * Cristiano:Overloaded methods
 * Overloaded methods require an explicit
 * return type when one such method calls another.
 * Because the second joiner method calls the first,
 * it requires an explicit String return type.
 * It should look like this:
 * def joiner(strings: List[String]): String = joiner(strings :_*)
 *
 */

 /* Cristiano:argument list
  * def joiner(strings: List[String]): String = joiner(strings :_*)
  * The "*" after the String in the argument list says “zero or more Strings.”
  */

  /**
   * Cristiano:variable argument list
   * It uses a special syntax (_*) to tell the compiler to convert
   * the input List into the variable argument list expected by
   * the first joiner method:
   * def joiner( strings: List[ String]): String = joiner( strings :_*)
   */

